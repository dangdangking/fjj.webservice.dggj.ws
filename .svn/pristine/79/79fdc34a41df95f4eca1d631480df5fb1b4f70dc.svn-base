package com.spt.ws.client;


import java.util.ArrayList;
import java.util.List;
import java.util.Map;





import org.apache.logging.log4j.LogManager;  
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.spt.core.Property;
import com.spt.ws.dao.IClientDao;

@Component
public class ClientWYImpl extends WebServiceBase implements IClientWY {
	private static Logger log = LogManager.getLogger("com.spt.ws.client");
	//@Scheduled(cron="0/5 * *  * * ? ")   //每5秒执行一次
	@Autowired
	private IClientDao dao;
	
	private String head = "#HEAD";
	private String end = "#END";

	
	private boolean checkMsg(String msg){
		if(msg.startsWith("#MSG")&&msg.endsWith("#END")){
			String s[] = msg.split("::");
			if("0".equals(s[1])) {
				return true;
			}else {
				return false;
			}
			
		}else{
			return false;
		}
	}
	
	private String assembleLine(String[] keys,Map<String,Object> map){
		StringBuffer sb = new StringBuffer("::");
		for(String key:keys){
			sb.append(map.get(key)).append("::");
		}
		sb.append("||");
		return sb.toString();
	}
	
	private static int GETXZSB_DEALY_TIME = 0;
	@Override
	public void getXZSB() {
		log.info("start getXZSB..........");
		try {
			List<Map<String,Object>> li = dao.getXZSB();
			int i = 0,total = 0;
			StringBuffer parm = new StringBuffer(head);
			StringBuffer ids = new StringBuffer();
			//String[] keys = new String[]{"SBID","YJTM","SMCZY","SMSJ","SMLY","SMTH","XCBM","CJDM","SJZL","LENGTH","WIDTH","HEIGHT","XCBH1"};
			String[] keys = Property.getProperty("fjj.send.xzsb").split(",");
			if(keys == null || keys.length == 0){
			    log.error("记取字段配置信息出错");
			    return;
			}
			for(Map<String,Object> map : li){
				i++;total++;
				parm.append(this.assembleLine(keys, map));
				//ids.append(map.get("ID")).append(",");
				ids.append("'" + map.get("ID")).append("',");
				if(i == 300||total == li.size()){
					parm.append(end);
					log.info("send msg is : " + parm.toString());
					String res = callWS("getYJSM", parm.toString());
					log.info("return msg is :" + res);
					ids.deleteCharAt(ids.length() - 1);
					if(checkMsg(res)){
						dao.setXZSBFlag(ids.toString(),"1");
					}else{
						List<String> list = assemb(parm.toString());
						String[] idl = ids.toString().split(",");
						for (int j = 0; j<list.size(); j++){
							String s = list.get(j);
							String rt = callWS("getYJSM", s);
							if(checkMsg(rt)){
								dao.setXZSBFlag(idl[j],"1");
							}else{
								dao.setXZSBFlag(idl[j],"9");
							}
						}
					}
					parm = new StringBuffer(head);
					ids = new StringBuffer();
					i = 0;
				}
			}
			GETXZSB_DEALY_TIME = 0;
		} catch (Exception e) {
			log.error("err msg:" + e.getMessage());
			e.printStackTrace();
			if(GETXZSB_DEALY_TIME < 110) GETXZSB_DEALY_TIME += 10;
			delay(GETXZSB_DEALY_TIME);
		}
		/*try {
			//dao.saveTransferStatus("getXZSB", GETXZSB_DEALY_TIME);
		} catch (Exception e) {
			log.error("save status error" + e.getMessage());
		}*/
		log.info("end getXZSB..........");
	}
	
	private static int GETSBFJ_DEALY_TIME = 0;
	//@Scheduled(cron="0/2 * *  * * ? ")   //每5秒执行一次
	@Override
	public void getSBFJ() {
		log.info("start getSBFJ..........");
		try {
			List<Map<String,Object>> li = dao.getSBFJ();
			int i = 0,total = 0;
			StringBuffer parm = new StringBuffer(head);
			StringBuffer ids = new StringBuffer();
			String[] keys = Property.getProperty("fjj.send.sbfj").split(",");
            if(keys == null || keys.length == 0){
                log.error("记取字段配置信息出错");
                return;
            }
			//log.info("new keys");
			for(Map<String,Object> map : li){
				i++;total++;
				parm.append(this.assembleLine(keys, map));
				//ids.append(map.get("ID")).append(",");
				ids.append("'" + map.get("ID")).append("',");
				if(i == 300||total == li.size()){
					parm.append(end);
					log.info("send msg is : " + parm.toString());
					String res = callWS("getYJLG", parm.toString());
					log.info("return msg is :" + res);
					ids.deleteCharAt(ids.length() - 1);
					if(checkMsg(res)){
						dao.setSBFJFlag(ids.toString(),"1");
					}else{
						List<String> list = assemb(parm.toString());
						String[] idl = ids.toString().split(",");
						for (int j = 0; j<list.size(); j++){
							String s = list.get(j);
							String rt = callWS("getYJLG", s);
							if(checkMsg(rt)){
								dao.setSBFJFlag(idl[j],"1");
							}else{
								dao.setSBFJFlag(idl[j],"9");
							}
						}
					}
					parm = new StringBuffer(head);
					ids = new StringBuffer();
					i = 0;
				}
			}
			GETSBFJ_DEALY_TIME = 0;
		} catch (Exception e) {
			log.error(e.getMessage());
			e.printStackTrace();
			if(GETSBFJ_DEALY_TIME < 110) GETSBFJ_DEALY_TIME += 10;
			delay(GETSBFJ_DEALY_TIME);
		}
		/*try {
			dao.saveTransferStatus("getYJLG", GETSBFJ_DEALY_TIME);
		} catch (Exception e) {
			log.error("save status error" + e.getMessage());
		}*/
		log.info("end getSBFJ..........");
	}
	
	private static int GETROUTE_DEALY_TIME = 0;
	@Override
	public void getRoute() {
	    log.info("start getRoute..........");
        try {
            List<Map<String,Object>> li = dao.getRoute();
            int i = 0,total = 0;
            StringBuffer parm = new StringBuffer(head);
            StringBuffer ids = new StringBuffer();
            String[] keys = Property.getProperty("fjj.send.route").split(",");
            if(keys == null || keys.length == 0){
                log.error("记取字段配置信息出错");
                return;
            }
            //log.info("new keys");
            for(Map<String,Object> map : li){
                i++;total++;
                parm.append(this.assembleLine(keys, map));
                //ids.append(map.get("ID")).append(",");
                ids.append("'" + map.get("ID")).append("',");
                if(i == 300||total == li.size()){
                    parm.append(end);
                    log.info("send msg is : " + parm.toString());
                    String res = callWS("getYJLG", parm.toString());
                    log.info("return msg is :" + res);
                    ids.deleteCharAt(ids.length() - 1);
                    if(checkMsg(res)){
                        dao.setRouteFlag(ids.toString(),"1");
                    }else{
                        List<String> list = assemb(parm.toString());
                        String[] idl = ids.toString().split(",");
                        for (int j = 0; j<list.size(); j++){
                            String s = list.get(j);
                            String rt = callWS("getYJLG", s);
                            if(checkMsg(rt)){
                                dao.setRouteFlag(idl[j],"1");
                            }else{
                                dao.setRouteFlag(idl[j],"9");
                            }
                        }
                    }
                    parm = new StringBuffer(head);
                    ids = new StringBuffer();
                    i = 0;
                }
            }
            GETROUTE_DEALY_TIME = 0;
        } catch (Exception e) {
            log.error(e.getMessage());
            e.printStackTrace();
            if(GETROUTE_DEALY_TIME < 110) GETROUTE_DEALY_TIME += 10;
            delay(GETROUTE_DEALY_TIME);
        }
        /*try {
            //dao.saveTransferStatus("getRoute", GETROUTE_DEALY_TIME);
        } catch (Exception e) {
            log.error("save status error" + e.getMessage());
        }*/
        log.info("end getRoute..........");
	}

	private static int GETQGFF_DEALY_TIME = 0;
	@Override
	public void getQGFF() {
		log.info("start getQGFF..........");
		try {
			List<Map<String,Object>> li = dao.getQGFF();
			int i = 0,total = 0;
			//StringBuffer parmyy = new StringBuffer(head);
			StringBuffer parm = new StringBuffer(head);
			String[] headkeys = Property.getProperty("fjj.send.qgff.head").split(",");
			String[] bodykeys = Property.getProperty("fjj.send.qgff.body").split(",");
            if(headkeys == null || headkeys.length == 0 || bodykeys == null || bodykeys.length == 0){
                log.error("记取字段配置信息出错");
                return;
            }
			for(Map<String,Object> map : li){
				i++;total++;
				//parmyy.append(this.assembleLine(keysyy, map));
				parm.append(this.assembleLine(headkeys, map));
				//ids.append(map.get("ID")).append(",");
				List<Map<String,Object>> libody = (List<Map<String, Object>>) map.get("maillist");
				for(Map<String,Object> mapbody : libody){
				    parm.append(this.assembleLine(bodykeys, mapbody));
				}
				parm.append(end);
				log.info("send msg is : " + parm.toString());
                String res = callWS("getYJLG", parm.toString());
                log.info("return msg is :" + res);
                if(checkMsg(res)){
                    dao.updateQGFF(map, "1");
                }else{
                    dao.updateQGFF(map, "9");
                }
			}
			
			GETQGFF_DEALY_TIME = 0;
		} catch (Exception e) {
		log.error(e.getMessage());
		e.printStackTrace();
		if(GETQGFF_DEALY_TIME < 110) GETQGFF_DEALY_TIME += 10;
        delay(GETQGFF_DEALY_TIME);
		}
		
		log.info("end getQGFF..........");
	}

	
	private List<String> assemb(String parm){
		List<String> li = new ArrayList<String>();
		String[] parmLine = parm.split("\\|\\|");
		for (String ss : parmLine){
			if(ss.startsWith("#HEAD::")) {
				li.add(ss+"||#END");
			}else if(ss.startsWith("#END")){
				continue;
			}else{
				li.add("#HEAD" + ss+"||#END");
			}
		}
		return li;
	}
	private void delay(int seconds){
		if (seconds == 0) return;
		try {
			Thread.sleep(seconds*1000);
		} catch (InterruptedException e1) {
			log.info(e1.getMessage());
		}
	}
}
